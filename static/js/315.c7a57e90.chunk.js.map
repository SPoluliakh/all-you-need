{"version":3,"file":"static/js/315.c7a57e90.chunk.js","mappings":"sOAEaA,EAAOC,EAAAA,GAAAA,KAAH,+CAIJC,EAAYD,EAAAA,GAAAA,MAAH,kdACT,SAAAE,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAA0B,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAEtB,SAAAF,GAAC,OAAIA,EAAEC,MAAME,MAAMC,MAAlB,IACL,SAAAJ,GAAC,OAAIA,EAAEC,MAAMI,UAAUC,CAAtB,IACL,SAAAN,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACgB,SAAAF,GAAC,OAAIA,EAAEC,MAAME,MAAMI,MAAlB,IACE,SAAAP,GAAC,OAAIA,EAAEC,MAAME,MAAMI,MAAlB,IACH,SAAAP,GAAC,OAAIA,EAAEC,MAAME,MAAMI,MAAlB,IACE,SAAAP,GAAC,OAAIA,EAAEC,MAAME,MAAMI,MAAlB,IAKhB,SAAAP,GAAC,OAAIA,EAAEC,MAAMI,UAAUG,EAAtB,IAILC,EAAaX,EAAAA,GAAAA,OAAH,mSACV,SAAAE,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACF,SAAAF,GAAC,OAAIA,EAAEC,MAAMS,QAAQC,IAApB,IACM,SAAAX,GAAC,OAAIA,EAAEC,MAAME,MAAMC,MAAlB,IAIT,SAAAJ,GAAC,OAAIA,EAAEC,MAAMW,OAAOC,SAAnB,IAGH,iBAAM,KAAN,IACC,SAAAb,GACN,GAAe,WAAXA,EAAEc,KACJ,MAAO,KAEV,IACQ,SAAAd,GACP,GAAe,WAAXA,EAAEc,KACJ,MAAO,KAEV,I,SCtCUC,EAAc,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC5C,GAA4BC,EAAAA,EAAAA,MAAnBC,GAAT,eACMC,GAAWC,EAAAA,EAAAA,UAOjB,OACE,+BACE,UAAC,EAAD,CAASJ,SAAUA,EAAnB,WACE,4BACE,SAAC,EAAD,CACEK,IAAKF,EACLJ,SAAUA,EACVO,MAAOR,EACPF,KAAK,OACLW,YAAY,iCAGhB,SAAC,EAAD,CAAeX,KAAK,SAApB,UACE,SAAC,MAAD,CAAUY,KAAK,YAEjB,SAAC,EAAD,CAAeZ,KAAK,SAASa,QApBV,WACvBP,EAAgB,CAAC,GACjBC,EAASO,QAAQC,OAClB,EAiBK,UACE,SAAC,MAAD,CAAOH,KAAK,aAKrB,E,oCClCKI,EAAa,kDACbC,EAAU,mCAEHC,EAAoB,mCAAG,WAAOC,GAAP,gGAAaC,EAAb,+BAAuB,SACnDC,EAAS,IAAIC,gBAAgB,CACjCC,EAAE,GAAD,OAAKJ,GACNK,MAAM,GAAD,OAAKJ,GACVK,MAAM,GAAD,OAAKR,KAJsB,SAMXS,EAAAA,EAAAA,IAAA,UAAaV,EAAb,YAA2BK,IANhB,uBAM1BM,EAN0B,EAM1BA,KAN0B,kBAO3BA,GAP2B,2CAAH,sDAUpBC,EAAuB,mCAAG,WAAOC,EAAKC,GAAZ,gGAAiBV,EAAjB,+BAA2B,SAC1DC,EAAS,IAAIC,gBAAgB,CACjCO,IAAI,GAAD,OAAKA,GACRC,IAAI,GAAD,OAAKA,GACRN,MAAM,GAAD,OAAKJ,GACVK,MAAM,GAAD,OAAKR,KALyB,SAOdS,EAAAA,EAAAA,IAAA,UAAaV,EAAb,YAA2BK,IAPb,uBAO7BM,EAP6B,EAO7BA,KAP6B,kBAS9BA,GAT8B,2CAAH,wDCbvBI,EAAY/C,EAAAA,GAAAA,GAAH,4FACP,SAAAE,GAAC,OAAIA,EAAEC,MAAMI,UAAUyC,EAAtB,IACA,SAAA9C,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACE,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGP6C,EAAOjD,EAAAA,GAAAA,IAAH,6FAMJkD,EAAYlD,EAAAA,GAAAA,IAAH,kEAKTmD,EAAOnD,EAAAA,GAAAA,EAAH,6CACF,SAAAE,GAAC,OAAIA,EAAEC,MAAMI,UAAUG,EAAtB,ICTH0C,EAAgB,WAAO,IAAD,EACjC,GAA0CC,EAAAA,EAAAA,UAAS,MAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA8BJ,EAAAA,EAAAA,UAAS,IAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACA,GAAwCtC,EAAAA,EAAAA,MAAxC,eAAOuC,EAAP,KAAqBtC,EAArB,KAEMuC,EAAK,UAAGD,EAAaE,IAAI,eAApB,QAA+B,IAE1CC,EAAAA,EAAAA,YAAU,WACRC,UAAUC,YAAYC,oBACpB,SAAAC,GACE,IAAMC,EAAWD,EAASE,OAAOC,SAC3BC,EAAYJ,EAASE,OAAOG,UAClCf,EAAU,WACVb,EAAwBwB,EAAUG,GAC/BE,MAAK,SAAAC,GACJf,EAAWe,GACXjB,EAAU,YACX,IACAkB,OAAM,SAAAC,GACLnB,EAAU,YACVoB,QAAQC,IAAIF,EACb,GACJ,IACD,SAAAA,GACE,IAAMG,EAAQ,IAAIC,MAAMJ,EAAIK,SAC5BF,EAAMvB,OAAS,IACfD,EAAiBwB,EAClB,GAEJ,GAAE,IAqBH,OACE,UAAC,EAAD,YACE,SAAC,EAAD,mCACCzB,IACC,wGAKF,SAACrC,EAAD,CACEC,KAAM2C,EACN1C,SA9BsB,SAAA+D,GAC1B,IAAQxD,EAAUwD,EAAIC,OAAdzD,MACRJ,EAA0B,KAAVI,EAAe,CAAES,KAAMT,GAAU,CAAC,EACnD,EA4BKN,SA1Be,SAAA8D,GACnBA,EAAIE,iBACJ3B,EAAU,WACVvB,EAAqB2B,GAClBY,MAAK,SAAAC,GACJf,EAAWe,GACXjB,EAAU,YACX,IACAkB,OAAM,SAAAC,GACLnB,EAAU,YACVoB,QAAQC,IAAIF,EACb,GACJ,IAgBe,cAAXpB,IACC,4BACE,UAAC,EAAD,wBACaE,EAAQxC,KADrB,KAC6BwC,EAAQ2B,IAAIC,YAEzC,UAAC,EAAD,YACE,gBACEC,IAAG,4CAAuC7B,EAAQA,QAAQ,GAAG8B,KAA1D,WACHC,IAAI,MAEN,UAAC,EAAD,0BAAsBC,KAAKC,MAAMjC,EAAQkC,KAAKC,MAA9C,iBAEF,UAAC,EAAD,2BAAuBnC,EAAQA,QAAQ,GAAGoC,gBAC1C,UAAC,EAAD,yBAEGJ,KAAKC,MAAMjC,EAAQkC,KAAKC,MAF3B,aAIA,UAAC,EAAD,0BAAsBnC,EAAQqC,KAAKC,MAAnC,WAEA,UAAC,EAAD,wBAAoBtC,EAAQkC,KAAKK,aACjC,UAAC,EAAD,wBAAoBvC,EAAQwC,MAAMrD,QAClC,UAAC,EAAD,yBAAqBa,EAAQwC,MAAMpD,YAK5C,ECpGYqD,EAAc,WACzB,OACE,8BACE,SAAC/C,EAAD,KAGL,C","sources":["components/WetherForm/WeatherForm.styled.js","components/WetherForm/WeatherForm.jsx","Utils/weatherApi.js","components/WeatherResult/WeatherResult.styled.js","components/WeatherResult/WeatherResult.jsx","Pages/Weather/WeatherPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  position: relative;\n`;\n\nexport const FormInput = styled.input`\n  padding: ${p => p.theme.space[2]}px ${p => p.theme.space[4]}px;\n\n  border-radius: ${p => p.theme.radii.normal};\n  font-size: ${p => p.theme.fontSizes.m}px;\n  width: ${p => p.theme.space[8]}px;\n  border-top-left-radius: ${p => p.theme.radii.sadVew};\n  border-bottom-left-radius: ${p => p.theme.radii.sadVew};\n  border-top-right-radius: ${p => p.theme.radii.sadVew};\n  border-bottom-right-radius: ${p => p.theme.radii.sadVew};\n  ::placeholder {\n    font-family: -apple-system, BlinkMacSystemFont, Caveat, Segoe UI, Roboto,\n      Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue,\n      sans-serif;\n    font-size: ${p => p.theme.fontSizes.ml}px;\n  }\n`;\n\nexport const FormButton = styled.button`\n  padding: ${p => p.theme.space[0]}px;\n  border: ${p => p.theme.borders.none};\n  border-radius: ${p => p.theme.radii.normal};\n  background-color: transparent;\n  cursor: pointer;\n\n  color: ${p => p.theme.colors.headerBcg};\n\n  position: absolute;\n  top: ${() => '7px'};\n  left: ${p => {\n    if (p.type === 'submit') {\n      return '4px';\n    }\n  }};\n  right: ${p => {\n    if (p.type === 'button') {\n      return '7px';\n    }\n  }};\n\n  transition: scale 250ms linear;\n  :hover {\n    scale: 1.2;\n  }\n`;\n","import { FcSearch } from 'react-icons/fc';\nimport { BsXLg } from 'react-icons/bs';\nimport * as SC from './WeatherForm.styled';\nimport { useSearchParams } from 'react-router-dom';\nimport { useRef } from 'react';\n\nexport const WeatherForm = ({ name, onChange, onSubmit }) => {\n  const [, setSearchParams] = useSearchParams();\n  const inputRef = useRef();\n\n  const handleInputClean = () => {\n    setSearchParams({});\n    inputRef.current.focus();\n  };\n\n  return (\n    <>\n      <SC.Form onSubmit={onSubmit}>\n        <label>\n          <SC.FormInput\n            ref={inputRef}\n            onChange={onChange}\n            value={name}\n            type=\"text\"\n            placeholder=\"Search city ðŸŒ¤ \"\n          />\n        </label>\n        <SC.FormButton type=\"submit\">\n          <FcSearch size=\"24px\" />\n        </SC.FormButton>\n        <SC.FormButton type=\"button\" onClick={handleInputClean}>\n          <BsXLg size=\"24\" />\n        </SC.FormButton>\n      </SC.Form>\n    </>\n  );\n};\n","import axios from 'axios';\n\nconst URL_ADRESS = 'https://api.openweathermap.org/data/2.5/weather';\nconst URL_KEY = 'f00c38e0279b7bc85480c3fe775d518c';\n\nexport const getWeatherByCityName = async (city, measure = 'metric') => {\n  const params = new URLSearchParams({\n    q: `${city}`,\n    units: `${measure}`,\n    appid: `${URL_KEY}`,\n  });\n  const { data } = await axios.get(`${URL_ADRESS}?${params}`);\n  return data;\n};\n\nexport const getWeatherByGeoPosition = async (lat, lon, measure = 'metric') => {\n  const params = new URLSearchParams({\n    lat: `${lat}`,\n    lon: `${lon}`,\n    units: `${measure}`,\n    appid: `${URL_KEY}`,\n  });\n  const { data } = await axios.get(`${URL_ADRESS}?${params}`);\n\n  return data;\n};\n","import styled from 'styled-components';\n\nexport const MainTitle = styled.h1`\n  font-size: ${p => p.theme.fontSizes.xl}px;\n  margin-top: ${p => p.theme.space[0]}px;\n  margin-bottom: ${p => p.theme.space[3]}px;\n`;\n\nexport const Wrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const InnerWrap = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Text = styled.p`\n  font-size: ${p => p.theme.fontSizes.ml}px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { WeatherForm } from '../../components/WetherForm/WeatherForm';\nimport {\n  getWeatherByCityName,\n  getWeatherByGeoPosition,\n} from '../../Utils/weatherApi';\n\nimport * as SC from './WeatherResult.styled';\n\nexport const WeatherResult = () => {\n  const [locationEroor, setLocationEroor] = useState(null);\n  const [status, setStatus] = useState('idle');\n  const [weather, setWeather] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('city') ?? '';\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(\n      position => {\n        const Latitude = position.coords.latitude;\n        const Longitude = position.coords.longitude;\n        setStatus('pending');\n        getWeatherByGeoPosition(Latitude, Longitude)\n          .then(resalt => {\n            setWeather(resalt);\n            setStatus('fulfilled');\n          })\n          .catch(err => {\n            setStatus('rejected');\n            console.log(err);\n          });\n      },\n      err => {\n        const error = new Error(err.message);\n        error.status = 400;\n        setLocationEroor(error);\n      }\n    );\n  }, []);\n\n  const handlcityNameChange = evt => {\n    const { value } = evt.target;\n    setSearchParams(value !== '' ? { city: value } : {});\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    setStatus('pending');\n    getWeatherByCityName(query)\n      .then(resalt => {\n        setWeather(resalt);\n        setStatus('fulfilled');\n      })\n      .catch(err => {\n        setStatus('rejected');\n        console.log(err);\n      });\n  };\n\n  return (\n    <SC.Wrap>\n      <SC.MainTitle>Weather ðŸŒ¤</SC.MainTitle>\n      {locationEroor && (\n        <h2>\n          Please enable geolocation to automatically provide weather for your\n          region\n        </h2>\n      )}\n      <WeatherForm\n        name={query}\n        onChange={handlcityNameChange}\n        onSubmit={handleSubmit}\n      />\n      {status === 'fulfilled' && (\n        <div>\n          <SC.Text>\n            Location: {weather.name}, {weather.sys.country}\n          </SC.Text>\n          <SC.InnerWrap>\n            <img\n              src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\n              alt=\"\"\n            />\n            <SC.Text>Tempreture: {Math.round(weather.main.temp)} Â°C </SC.Text>\n          </SC.InnerWrap>\n          <SC.Text>Description: {weather.weather[0].description}</SC.Text>\n          <SC.Text>\n            Feels_like:\n            {Math.round(weather.main.temp)} Â°C\n          </SC.Text>\n          <SC.Text>Wind speed: {weather.wind.speed} m/s</SC.Text>\n\n          <SC.Text>Pressure: {weather.main.pressure}</SC.Text>\n          <SC.Text>Latitude: {weather.coord.lat}</SC.Text>\n          <SC.Text>Longitude: {weather.coord.lon}</SC.Text>\n        </div>\n      )}\n    </SC.Wrap>\n  );\n};\n","import { WeatherResult } from 'components/WeatherResult/WeatherResult';\n\nexport const WeatherPage = () => {\n  return (\n    <section>\n      <WeatherResult />\n    </section>\n  );\n};\n"],"names":["Form","styled","FormInput","p","theme","space","radii","normal","fontSizes","m","sadVew","ml","FormButton","borders","none","colors","headerBcg","type","WeatherForm","name","onChange","onSubmit","useSearchParams","setSearchParams","inputRef","useRef","ref","value","placeholder","size","onClick","current","focus","URL_ADRESS","URL_KEY","getWeatherByCityName","city","measure","params","URLSearchParams","q","units","appid","axios","data","getWeatherByGeoPosition","lat","lon","MainTitle","xl","Wrap","InnerWrap","Text","WeatherResult","useState","locationEroor","setLocationEroor","status","setStatus","weather","setWeather","searchParams","query","get","useEffect","navigator","geolocation","getCurrentPosition","position","Latitude","coords","latitude","Longitude","longitude","then","resalt","catch","err","console","log","error","Error","message","evt","target","preventDefault","sys","country","src","icon","alt","Math","round","main","temp","description","wind","speed","pressure","coord","WeatherPage"],"sourceRoot":""}