{"version":3,"file":"static/js/369.d3740169.chunk.js","mappings":"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","sources":["components/WetherForm/WeatherForm.jsx","Utils/weatherApi.js","components/WeatherResult/WeatherResult.jsx","Pages/Weather/WeatherPage.jsx"],"sourcesContent":["import { FcSearch } from 'react-icons/fc';\n\nexport const WeatherForm = ({ name, onChange, onSubmit }) => {\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <label>\n          <input\n            onChange={onChange}\n            value={name}\n            type=\"text\"\n            placeholder=\"Search city ðŸŒ¤ \"\n          />\n        </label>\n        <button type=\"submit\">\n          <FcSearch size=\"24px\" />\n        </button>\n      </form>\n    </>\n  );\n};\n","import axios from 'axios';\n\nconst URL_ADRESS = 'https://api.openweathermap.org/data/2.5/weather';\nconst URL_KEY = 'f00c38e0279b7bc85480c3fe775d518c';\n\nexport const getWeatherByCityName = async (city, measure = 'metric') => {\n  const params = new URLSearchParams({\n    q: `${city}`,\n    units: `${measure}`,\n    appid: `${URL_KEY}`,\n  });\n  const { data } = await axios.get(`${URL_ADRESS}?${params}`);\n  return data;\n};\n\nexport const getWeatherByGeoPosition = async (lat, lon, measure = 'metric') => {\n  const params = new URLSearchParams({\n    lat: `${lat}`,\n    lon: `${lon}`,\n    units: `${measure}`,\n    appid: `${URL_KEY}`,\n  });\n  const { data } = await axios.get(`${URL_ADRESS}?${params}`);\n\n  return data;\n};\n","import { useEffect, useState } from 'react';\n\nimport { WeatherForm } from '../../components/WetherForm/WeatherForm';\nimport {\n  getWeatherByCityName,\n  getWeatherByGeoPosition,\n} from '../../Utils/weatherApi';\n\nexport const WeatherResult = () => {\n  const [cityName, setCityName] = useState('');\n  const [locationEroor, setLocationEroor] = useState(null);\n  const [status, setStatus] = useState('idle');\n  const [weather, setWeather] = useState('');\n  console.log(locationEroor);\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(\n      position => {\n        const Latitude = position.coords.latitude;\n        const Longitude = position.coords.longitude;\n        setStatus('pending');\n        getWeatherByGeoPosition(Latitude, Longitude)\n          .then(resalt => {\n            setWeather(resalt);\n            setStatus('fulfilled');\n          })\n          .catch(err => {\n            setStatus('rejected');\n            console.log(err);\n          });\n      },\n      err => {\n        const error = new Error(err.message);\n        error.status = 400;\n        setLocationEroor(error);\n      }\n    );\n  }, []);\n\n  const handlcityNameChange = evt => {\n    const { value } = evt.target;\n    setCityName(value);\n  };\n  console.log(weather);\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    setStatus('pending');\n    getWeatherByCityName(cityName)\n      .then(resalt => {\n        setWeather(resalt);\n        setStatus('fulfilled');\n      })\n      .catch(err => {\n        setStatus('rejected');\n        console.log(err);\n      });\n  };\n  return (\n    <>\n      {locationEroor && (\n        <h2>\n          Please enable geolocation to automatically provide weather for your\n          region\n        </h2>\n      )}\n      <WeatherForm\n        name={cityName}\n        onChange={handlcityNameChange}\n        onSubmit={handleSubmit}\n      />\n      {status === 'fulfilled' && (\n        <div>\n          <p>\n            Location: {weather.name}, {weather.sys.country}\n          </p>\n          <div>\n            <img\n              src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\n              alt=\"\"\n            />\n            <p>Tempreture: {Math.round(weather.main.temp)}</p>\n          </div>\n\n          <p>\n            Feels_like:\n            {Math.round(weather.main.temp)}\n          </p>\n          <p>Max: {Math.round(weather.main.temp_max)}</p>\n          <p>Min: {Math.round(weather.main.temp_min)}</p>\n          <p>Wind speed: {weather.wind.speed} m/s</p>\n          <p>Description: {weather.weather[0].description}</p>\n          <p>Pressure: {weather.main.pressure}</p>\n          <p>Latitude: {weather.coord.lat}</p>\n          <p>Longitude: {weather.coord.lon}</p>\n        </div>\n      )}\n    </>\n  );\n};\n","import { WeatherResult } from 'components/WeatherResult/WeatherResult';\n\nexport const WeatherPage = () => {\n  return (\n    <section>\n      <h1>Weather ðŸŒ¤</h1>\n      <WeatherResult />\n    </section>\n  );\n};\n"],"names":["WeatherForm","name","onChange","onSubmit","value","type","placeholder","size","URL_ADRESS","URL_KEY","getWeatherByCityName","city","measure","params","URLSearchParams","q","units","appid","axios","data","getWeatherByGeoPosition","lat","lon","WeatherResult","useState","cityName","setCityName","locationEroor","setLocationEroor","status","setStatus","weather","setWeather","console","log","useEffect","navigator","geolocation","getCurrentPosition","position","Latitude","coords","latitude","Longitude","longitude","then","resalt","catch","err","error","Error","message","evt","target","preventDefault","sys","country","src","icon","alt","Math","round","main","temp","temp_max","temp_min","wind","speed","description","pressure","coord","WeatherPage"],"sourceRoot":""}